#!/bin/bash
##########################################################
# libtmux Installation - CCC CODE Pattern
# Python ORM für tmux Terminal Control
# setup/modules/libtmux.sh
##########################################################

source /etc/ccc.conf
source /root/ccc/setup/functions.sh

echo -e "${BLUE}[MODULE]${NC} libtmux Installation (CCC CODE Style)..."

# libtmux Configuration in Storage Root
LIBTMUX_DIR="$STORAGE_ROOT/tools/libtmux"
LIBTMUX_CONFIG="$STORAGE_ROOT/config/libtmux"
LIBTMUX_SCRIPTS_DIR="$STORAGE_ROOT/tools/libtmux/scripts"

# Verzeichnisse erstellen
mkdir -p "$LIBTMUX_DIR" "$LIBTMUX_CONFIG" "$LIBTMUX_SCRIPTS_DIR"
chown -R "$STORAGE_USER:$STORAGE_USER" "$LIBTMUX_DIR" "$LIBTMUX_CONFIG" "$LIBTMUX_SCRIPTS_DIR"

# Python Virtual Environment für libtmux erstellen
if [ ! -f "$LIBTMUX_DIR/bin/activate" ]; then
    log_info "Erstelle Python Virtual Environment für libtmux..."
    sudo -u "$STORAGE_USER" python3 -m venv "$LIBTMUX_DIR"
else
    log_info "libtmux Virtual Environment existiert bereits"
fi

# libtmux Packages installieren/updaten
log_info "Installiere libtmux Packages..."
sudo -u "$STORAGE_USER" bash -c "
    source '$LIBTMUX_DIR/bin/activate'
    pip install --upgrade pip
    
    # libtmux Core
    pip install --upgrade libtmux
    pip install --upgrade pydantic
    
    # Zusätzliche dependencies für Scripting
    pip install --upgrade click
    pip install --upgrade rich
    pip install --upgrade typer
"

# libtmux Beispiel Scripte erstellen
cat > "$LIBTMUX_SCRIPTS_DIR/session_manager.py" << 'SESSIONMANAGER'
#!/usr/bin/env python3
"""
libtmux Session Manager - Generated by CCC
Python ORM for tmux terminal control
"""

import libtmux
from typing import Optional, List
import typer

app = typer.Typer()
server = libtmux.Server()

@app.command()
def list_sessions():
    """List all tmux sessions"""
    sessions = server.list_sessions()
    print("=== TMUX Sessions ===")
    for session in sessions:
        print(f"• {session.name} ({len(session.windows)} windows)")
        for window in session.windows:
            print(f"  └─ {window.name} ({len(window.panes)} panes)")

@app.command()
def create_session(name: str, attach: bool = False):
    """Create a new tmux session"""
    try:
        session = server.new_session(
            session_name=name,
            attach=attach,
            start_directory="$STORAGE_ROOT"
        )
        print(f"✅ Session created: {name}")
        return session
    except Exception as e:
        print(f"❌ Error creating session: {e}")

@app.command()
def ccc_management():
    """Create CCC management session with multiple windows"""
    session = server.new_session(
        session_name="ccc-management",
        window_name="dashboard",
        attach=False,
        start_directory="$STORAGE_ROOT"
    )
    
    # Create additional windows
    session.new_window(
        window_name="logs",
        start_directory="/var/log",
        attach=False
    )
    
    session.new_window(
        window_name="services",
        start_directory="$STORAGE_ROOT",
        attach=False
    )
    
    # Send commands to windows
    dashboard = session.windows[0]
    dashboard.panes[0].send_keys("cd $STORAGE_ROOT && ls -la")
    
    logs = session.windows[1]
    logs.panes[0].send_keys("tail -f /var/log/ccc-*.log")
    
    services = session.windows[2]
    services.panes[0].send_keys("systemctl status nginx mysql")
    
    print("✅ CCC Management session created")
    print("Attach with: tmux attach -t ccc-management")

@app.command()
def kill_session(name: str):
    """Kill a tmux session"""
    session = server.find_where({"session_name": name})
    if session:
        session.kill_session()
        print(f"✅ Session killed: {name}")
    else:
        print(f"❌ Session not found: {name}")

if __name__ == "__main__":
    app()
SESSIONMANAGER

chmod +x "$LIBTMUX_SCRIPTS_DIR/session_manager.py"

# libtmux Automation Script
cat > "$LIBTMUX_SCRIPTS_DIR/automation_example.py" << 'AUTOMATION'
#!/usr/bin/env python3
"""
libtmux Automation Example - Generated by CCC
Automated tmux session setup for development
"""

import libtmux
import time
from pathlib import Path

def setup_development_session():
    """Setup a complete development session"""
    server = libtmux.Server()
    
    # Create development session
    session = server.new_session(
        session_name="dev",
        window_name="editor",
        start_directory=str(Path("$STORAGE_ROOT")),
        attach=False
    )
    
    # Split window for editor and terminal
    editor_pane = session.windows[0].panes[0]
    terminal_pane = session.windows[0].split_window(vertical=False)
    
    # Send commands
    editor_pane.send_keys("# Development Editor - add your commands here")
    terminal_pane.send_keys("cd $STORAGE_ROOT && git status")
    
    # Create additional windows
    docs_window = session.new_window(
        window_name="docs",
        start_directory="$STORAGE_ROOT/www",
        attach=False
    )
    
    logs_window = session.new_window(
        window_name="monitoring",
        start_directory="/var/log",
        attach=False
    )
    
    # Setup monitoring
    logs_window.panes[0].send_keys("htop")
    
    print("✅ Development session setup complete")
    print("Attach with: tmux attach -t dev")
    
    return session

def list_all_sessions():
    """List all sessions with detailed information"""
    server = libtmux.Server()
    
    print("=== Detailed TMUX Session Info ===")
    for session in server.list_sessions():
        print(f"\nSession: {session.name}")
        print(f"  Created: {session.session_created}")
        print(f"  Windows: {len(session.windows)}")
        
        for window in session.windows:
            print(f"  Window: {window.name} (ID: {window.window_id})")
            print(f"    Panes: {len(window.panes)}")
            
            for pane in window.panes:
                print(f"    Pane: {pane.pane_id} - Current command: {pane.pane_current_command}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "setup":
        setup_development_session()
    else:
        list_all_sessions()
AUTOMATION

chmod +x "$LIBTMUX_SCRIPTS_DIR/automation_example.py"

# libtmux CLI Wrapper erstellen
cat > /usr/local/bin/ccc-libtmux << 'LIBTMUXSCRIPT'
#!/bin/bash
##########################################################
# CCC libtmux Wrapper - CCC CODE Style
##########################################################

source /etc/ccc.conf
LIBTMUX_DIR="$STORAGE_ROOT/tools/libtmux"

# Virtual Environment aktivieren
if [ -f "$LIBTMUX_DIR/bin/activate" ]; then
    source "$LIBTMUX_DIR/bin/activate"
else
    echo "libtmux Virtual Environment nicht gefunden in $LIBTMUX_DIR"
    echo "Führe aus: ccc  # um libtmux zu installieren"
    exit 1
fi

# Python Script ausführen
exec python "$LIBTMUX_SCRIPTS_DIR/session_manager.py" "$@"
LIBTMUXSCRIPT
chmod +x /usr/local/bin/ccc-libtmux

# Convenience Symlinks
ln -sf /usr/local/bin/ccc-libtmux /usr/local/bin/tmux-manager

# libtmux Konfiguration
cat > "$LIBTMUX_CONFIG/config.py" << LIBTMUXCONFIG
# libtmux Configuration - Generated by CCC

import os
from pathlib import Path

STORAGE_ROOT = os.environ.get("STORAGE_ROOT", "/home/user-data")

# Default session configurations
DEFAULT_SESSIONS = {
    "ccc-management": {
        "windows": [
            {
                "name": "dashboard",
                "start_directory": STORAGE_ROOT,
                "panes": [
                    {"command": "cd $STORAGE_ROOT && ls -la"}
                ]
            },
            {
                "name": "services", 
                "start_directory": STORAGE_ROOT,
                "panes": [
                    {"command": "systemctl status nginx mysql"}
                ]
            },
            {
                "name": "logs",
                "start_directory": "/var/log",
                "panes": [
                    {"command": "tail -f ccc-*.log"}
                ]
            }
        ]
    },
    "development": {
        "windows": [
            {
                "name": "code",
                "start_directory": STORAGE_ROOT,
                "panes": [
                    {"command": "# Development pane"},
                    {"command": "cd $STORAGE_ROOT"}
                ]
            }
        ]
    }
}

# Automation settings
AUTO_CREATE_SESSIONS = True
LOG_LEVEL = "INFO"
LIBTMUXCONFIG

# Test libtmux Installation
log_info "Teste libtmux Installation..."
if sudo -u "$STORAGE_USER" ccc-libtmux --help > /dev/null 2>&1; then
    log_success "libtmux Installation erfolgreich"
else
    log_warning "libtmux Installation könnte Probleme haben"
fi

# Usage Information
echo ""
echo -e "${GREEN}✅ libtmux Installation abgeschlossen${NC}"
echo ""
echo -e "${BLUE}Verwendung:${NC}"
echo "  ccc-libtmux --help                   # Session Manager Hilfe"
echo "  ccc-libtmux list-sessions            # Sessions auflisten"
echo "  ccc-libtmux create-session my-session # Neue Session"
echo "  ccc-libtmux ccc-management           # CCC Management Session"
echo "  tmux-manager                         # Kurzform"
echo ""
echo -e "${YELLOW}Konfiguration:${NC}"
echo "  Virtual Env: $LIBTMUX_DIR"
echo "  Config: $LIBTMUX_CONFIG/config.py"
echo "  Scripts: $LIBTMUX_SCRIPTS_DIR"
echo ""
echo -e "${GREEN}libtmux Features:${NC}"
echo "  • Python ORM für tmux"
echo "  • Automatisierte Session-Verwaltung"
echo "  • Programmatische Fenster/Pane-Steuerung"
echo "  • Integration in Python-Scripts"
echo ""

log_success "libtmux installation abgeschlossen (CCC CODE Style)"
