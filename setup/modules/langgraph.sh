#!/bin/bash
##########################################################
# LangGraph Installation - CCC CODE Pattern
# DAG-basiertes Agent Orchestration Framework
# setup/modules/langgraph.sh
##########################################################

source /etc/ccc.conf
source /root/ccc/setup/functions.sh

echo -e "${BLUE}[MODULE]${NC} LangGraph Installation (CCC CODE Style)..."

# LangGraph Configuration in Storage Root
LANGGRAPH_DIR="$STORAGE_ROOT/tools/langgraph"
LANGGRAPH_CONFIG="$STORAGE_ROOT/config/langgraph"
LANGGRAPH_AGENTS_DIR="$STORAGE_ROOT/tools/langgraph/agents"

# Verzeichnisse erstellen
mkdir -p "$LANGGRAPH_DIR" "$LANGGRAPH_CONFIG" "$LANGGRAPH_AGENTS_DIR"
chown -R "$STORAGE_USER:$STORAGE_USER" "$LANGGRAPH_DIR" "$LANGGRAPH_CONFIG" "$LANGGRAPH_AGENTS_DIR"

# Python Virtual Environment für LangGraph erstellen
if [ ! -f "$LANGGRAPH_DIR/bin/activate" ]; then
    log_info "Erstelle Python Virtual Environment für LangGraph..."
    sudo -u "$STORAGE_USER" python3 -m venv "$LANGGRAPH_DIR"
else
    log_info "LangGraph Virtual Environment existiert bereits"
fi

# LangGraph Packages installieren/updaten
log_info "Installiere LangGraph Packages..."
sudo -u "$STORAGE_USER" bash -c "
    source '$LANGGRAPH_DIR/bin/activate'
    pip install --upgrade pip
    
    # LangGraph Core
    pip install --upgrade langgraph
    pip install --upgrade langchain
    pip install --upgrade langchain-core
    pip install --upgrade langchain-community
    
    # LLM Integration
    pip install --upgrade anthropic
    pip install --upgrade openai
    pip install --upgrade groq
    
    # Zusätzliche dependencies
    pip install --upgrade pydantic
    pip install --upgrade numpy
    pip install --upgrade pandas
    pip install --upgrade networkx
    pip install --upgrade matplotlib
"

# LangGraph Agent Template erstellen
cat > "$LANGGRAPH_AGENTS_DIR/basic_agent.py" << 'LANGGRAPHAGENT'
#!/usr/bin/env python3
"""
LangGraph Basic Agent - Generated by CCC
DAG-based agent orchestration example
"""

from langgraph import StateGraph, START, END
from typing import TypedDict, Annotated
import operator

# Define state
class AgentState(TypedDict):
    question: str
    research: str
    answer: str

# Define nodes
def research_node(state: AgentState) -> AgentState:
    """Research the question"""
    question = state["question"]
    # Simulate research - in real implementation, call search tools
    research = f"Research about: {question}. Found relevant information."
    return {"research": research}

def answer_node(state: AgentState) -> AgentState:
    """Generate answer based on research"""
    question = state["question"]
    research = state["research"]
    answer = f"Based on research: {research}\nAnswer: This is a simulated answer for '{question}'"
    return {"answer": answer}

def quality_check_node(state: AgentState) -> AgentState:
    """Check answer quality"""
    answer = state["answer"]
    # Simple quality check
    if len(answer) > 20:
        return {"answer": answer + " [Quality: Good]"}
    else:
        return {"answer": answer + " [Quality: Needs improvement]"}

# Create graph
def create_agent_workflow():
    workflow = StateGraph(AgentState)
    
    # Add nodes
    workflow.add_node("research", research_node)
    workflow.add_node("answer", answer_node)
    workflow.add_node("quality_check", quality_check_node)
    
    # Define edges
    workflow.add_edge(START, "research")
    workflow.add_edge("research", "answer")
    workflow.add_edge("answer", "quality_check")
    workflow.add_edge("quality_check", END)
    
    return workflow.compile()

# Main execution
if __name__ == "__main__":
    # Create and run the agent
    agent = create_agent_workflow()
    
    # Test the agent
    test_question = "What is LangGraph?"
    result = agent.invoke({"question": test_question})
    
    print("=== LangGraph Agent Result ===")
    print(f"Question: {test_question}")
    print(f"Answer: {result['answer']}")
LANGGRAPHAGENT

chmod +x "$LANGGRAPH_AGENTS_DIR/basic_agent.py"

# LangGraph CLI Wrapper erstellen
cat > /usr/local/bin/ccc-langgraph << 'LANGGRAPHSCRIPT'
#!/bin/bash
##########################################################
# CCC LangGraph Wrapper - CCC CODE Style
##########################################################

source /etc/ccc.conf
LANGGRAPH_DIR="$STORAGE_ROOT/tools/langgraph"

# Virtual Environment aktivieren
if [ -f "$LANGGRAPH_DIR/bin/activate" ]; then
    source "$LANGGRAPH_DIR/bin/activate"
else
    echo "LangGraph Virtual Environment nicht gefunden in $LANGGRAPH_DIR"
    echo "Führe aus: ccc  # um LangGraph zu installieren"
    exit 1
fi

# LangGraph ausführen
exec python -c "import langgraph; print('LangGraph version:', langgraph.__version__)" "\$@"
LANGGRAPHSCRIPT
chmod +x /usr/local/bin/ccc-langgraph

# LangGraph Development Tools
cat > "$LANGGRAPH_AGENTS_DIR/developer_tools.py" << 'DEVTOOLS'
#!/usr/bin/env python3
"""
LangGraph Developer Tools - Generated by CCC
Utilities for agent development and testing
"""

import json
from typing import Dict, Any
from pathlib import Path

class LangGraphDeveloper:
    def __init__(self, storage_root: str):
        self.storage_root = Path(storage_root)
        self.agents_dir = self.storage_root / "tools" / "langgraph" / "agents"
        self.config_dir = self.storage_root / "config" / "langgraph"
        
    def list_agents(self) -> list:
        """List all available agents"""
        agents = []
        for agent_file in self.agents_dir.glob("*.py"):
            if agent_file.name != "__init__.py":
                agents.append(agent_file.stem)
        return agents
    
    def create_agent_template(self, name: str) -> Path:
        """Create a new agent template"""
        template = f'''#!/usr/bin/env python3
"""
{name} - LangGraph Agent
Generated by CCC Developer Tools
"""

from langgraph import StateGraph, START, END
from typing import TypedDict

class AgentState(TypedDict):
    input: str
    output: str

def process_node(state: AgentState) -> AgentState:
    """Process the input"""
    return {{"output": f"Processed: {{state['input']}}"}}

def create_workflow():
    workflow = StateGraph(AgentState)
    workflow.add_node("process", process_node)
    workflow.add_edge(START, "process")
    workflow.add_edge("process", END)
    return workflow.compile()

if __name__ == "__main__":
    agent = create_workflow()
    result = agent.invoke({{"input": "test input"}})
    print("Result:", result)
'''
        
        agent_file = self.agents_dir / f"{name}.py"
        agent_file.write_text(template)
        agent_file.chmod(0o755)
        return agent_file

if __name__ == "__main__":
    import os
    storage_root = os.environ.get("STORAGE_ROOT", "/home/user-data")
    dev = LangGraphDeveloper(storage_root)
    
    print("=== LangGraph Developer Tools ===")
    print("Available agents:", dev.list_agents())
    print("\\nCreate new agent: dev.create_agent_template('my_agent')")
DEVTOOLS

chmod +x "$LANGGRAPH_AGENTS_DIR/developer_tools.py"

# LangGraph Konfiguration
cat > "$LANGGRAPH_CONFIG/config.json" << LANGGRAPHCONFIG
{
    "langgraph": {
        "storage_root": "$STORAGE_ROOT",
        "agents_directory": "$LANGGRAPH_AGENTS_DIR",
        "default_llm": "claude-3-5-sonnet",
        "settings": {
            "debug": true,
            "cache_responses": true,
            "max_iterations": 10
        }
    },
    "llm_providers": {
        "anthropic": {
            "env_var": "ANTHROPIC_API_KEY"
        },
        "openai": {
            "env_var": "OPENAI_API_KEY"
        },
        "groq": {
            "env_var": "GROQ_API_KEY"
        }
    }
}
LANGGRAPHCONFIG

# Test LangGraph Installation
log_info "Teste LangGraph Installation..."
if sudo -u "$STORAGE_USER" ccc-langgraph > /dev/null 2>&1; then
    log_success "LangGraph Installation erfolgreich"
else
    log_warning "LangGraph Installation könnte Probleme haben"
fi

# Test Basic Agent
log_info "Teste Beispiel Agent..."
if sudo -u "$STORAGE_USER" python "$LANGGRAPH_AGENTS_DIR/basic_agent.py" > /dev/null 2>&1; then
    log_success "LangGraph Agent funktioniert"
fi

# Usage Information
echo ""
echo -e "${GREEN}✅ LangGraph Installation abgeschlossen${NC}"
echo ""
echo -e "${BLUE}Verwendung:${NC}"
echo "  ccc-langgraph                        # LangGraph Version"
echo "  python $LANGGRAPH_AGENTS_DIR/basic_agent.py    # Beispiel Agent"
echo "  python $LANGGRAPH_AGENTS_DIR/developer_tools.py # Dev Tools"
echo ""
echo -e "${YELLOW}Konfiguration:${NC}"
echo "  Virtual Env: $LANGGRAPH_DIR"
echo "  Config: $LANGGRAPH_CONFIG/config.json"
echo "  Agents: $LANGGRAPH_AGENTS_DIR"
echo ""
echo -e "${GREEN}LangGraph Features:${NC}"
echo "  • Directed Acyclic Graph (DAG) Workflows"
echo "  • Agent Orchestration"
echo "  • State Management"
echo "  • LLM Integration"
echo "  • Human-in-the-Loop"
echo ""

log_success "LangGraph installation abgeschlossen (CCC CODE Style)"
