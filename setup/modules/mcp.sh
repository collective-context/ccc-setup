#!/bin/bash
set -euo pipefail
##########################################################
# MCP Installation - CCC CODE Pattern
##########################################################

source /etc/ccc.conf
source /root/ccc/setup/functions.sh

echo -e "${BLUE}[MODULE]${NC} MCP Installation (CCC CODE Style)..."

# MCP Configuration in Storage Root mit erweiterten Sicherheitseinstellungen
MCP_DIR="$STORAGE_ROOT/tools/mcp"
MCP_CONFIG="$STORAGE_ROOT/config/mcp"
MCP_SERVERS_DIR="$STORAGE_ROOT/tools/mcp/servers"
MCP_LOG_DIR="$STORAGE_ROOT/logs/mcp"
MCP_AUDIT_DIR="$STORAGE_ROOT/logs/audit/mcp"
MCP_SECRETS_DIR="$STORAGE_ROOT/secrets/mcp"
MCP_BACKUP_DIR="$STORAGE_ROOT/backups/mcp"

# Erweiterte Sicherheitseinstellungen
readonly MCP_DIR_MODE=750
readonly MCP_FILE_MODE=640
readonly MCP_LOG_MODE=640
readonly MCP_AUDIT_MODE=600
readonly MCP_SECRETS_MODE=600
readonly MCP_BACKUP_MODE=600

# Sicherheits-Limits
readonly MCP_MAX_CONNECTIONS=10
readonly MCP_REQUEST_TIMEOUT=30
readonly MCP_MAX_REQUEST_SIZE=1048576  # 1MB
readonly MCP_RATE_LIMIT="60/minute"

# Verzeichnisse erstellen
mkdir -p "$MCP_DIR" "$MCP_CONFIG" "$MCP_SERVERS_DIR"
chown -R "$STORAGE_USER:$STORAGE_USER" "$MCP_DIR" "$MCP_CONFIG" "$MCP_SERVERS_DIR"

# Systemweite Voraussetzungen mit idempotenter Funktion
install_package python3 python3-pip python3-venv git curl wget nodejs npm

# Python Virtual Environment für MCP erstellen
if [ ! -f "$MCP_DIR/bin/activate" ]; then
    log_info "Erstelle Python Virtual Environment für MCP..."
    sudo -u "$STORAGE_USER" python3 -m venv "$MCP_DIR"
else
    log_info "MCP Virtual Environment existiert bereits"
fi

# MCP Core Packages installieren/updaten
log_info "Installiere MCP Packages..."
sudo -u "$STORAGE_USER" bash -c "
    source '$MCP_DIR/bin/activate'
    pip install --upgrade pip
    
    # MCP Core Packages
    pip install --upgrade mcp
    pip install --upgrade mcp-cli
    pip install --upgrade anthropic
    
    # Zusätzliche MCP dependencies
    pip install --upgrade pydantic
    pip install --upgrade httpx
    pip install --upgrade websockets
"

# MCP CLI Wrapper erstellen
cat > /usr/local/bin/ccc-mcp << 'MCPSCRIPT'
#!/bin/bash
##########################################################
# CCC MCP Wrapper - CCC CODE Style
# Lädt Konfiguration aus Storage Root
##########################################################

source /etc/ccc.conf
MCP_DIR="$STORAGE_ROOT/tools/mcp"
MCP_CONFIG="$STORAGE_ROOT/config/mcp"

# Virtual Environment aktivieren
if [ -f "$MCP_DIR/bin/activate" ]; then
    source "$MCP_DIR/bin/activate"
else
    echo "MCP Virtual Environment nicht gefunden in $MCP_DIR"
    echo "Führe aus: ccc  # um MCP zu installieren"
    exit 1
fi

# MCP CLI ausführen
exec mcp "\$@"
MCPSCRIPT
chmod +x /usr/local/bin/ccc-mcp

# MCP Server Template erstellen
cat > "$MCP_SERVERS_DIR/example_server.py" << 'MCPSERVER'
#!/usr/bin/env python3
"""
Example MCP Server - Generated by CCC
Model Context Protocol Server Template
"""

import asyncio
from mcp.server import Server
from mcp.server.models import InitializationOptions
import mcp.server.stdio
from mcp.types import TextContent, Tool

# Create server instance
server = Server("example-ccc-server")

@server.list_tools()
async def handle_list_tools() -> list[Tool]:
    """List available tools"""
    return [
        Tool(
            name="echo",
            description="Echo back the input text",
            inputSchema={
                "type": "object",
                "properties": {
                    "text": {"type": "string", "description": "Text to echo back"}
                },
                "required": ["text"]
            }
        )
    ]

@server.call_tool()
async def handle_call_tool(name: str, arguments: dict) -> list[TextContent]:
    """Handle tool calls"""
    if name == "echo":
        text = arguments.get("text", "")
        return [TextContent(type="text", text=f"Echo: {text}")]
    else:
        raise ValueError(f"Unknown tool: {name}")

async def main():
    # Run the server
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="example-ccc-server",
                server_version="1.0.0",
                capabilities=server.get_capabilities(
                    notification_options=None,
                    experimental_capabilities=None,
                )
            ),
        )

if __name__ == "__main__":
    asyncio.run(main())
MCPSERVER

chmod +x "$MCP_SERVERS_DIR/example_server.py"

# MCP Konfiguration erstellen
cat > "$MCP_CONFIG/mcp_config.json" << MCPCONFIG
{
    "mcp_servers": {
        "example-server": {
            "command": "python",
            "args": ["$MCP_SERVERS_DIR/example_server.py"],
            "env": {
                "PYTHONPATH": "$MCP_DIR/lib/python3.*/site-packages"
            }
        }
    },
    "storage_root": "$STORAGE_ROOT",
    "version": "1.0.0"
}
MCPCONFIG

# MCP Environment Setup
cat > "$MCP_CONFIG/env" << MCPENV
# MCP Environment - Generated by CCC
export MCP_DIR="$MCP_DIR"
export MCP_CONFIG="$MCP_CONFIG"
export MCP_SERVERS_DIR="$MCP_SERVERS_DIR"
export PATH="\$MCP_DIR/bin:\$PATH"
export PYTHONPATH="\$MCP_DIR/lib/python3.*/site-packages:\$PYTHONPATH"

# MCP CLI Aliases
alias mcp='ccc-mcp'
MCPENV

# Test MCP Installation
log_info "Teste MCP Installation..."
if sudo -u "$STORAGE_USER" ccc-mcp --help > /dev/null 2>&1; then
    log_success "MCP Installation erfolgreich"
else
    log_warning "MCP Installation könnte Probleme haben"
fi

# Usage Information
echo ""
echo -e "${GREEN}✅ MCP Installation abgeschlossen${NC}"
echo ""
echo -e "${BLUE}Verwendung:${NC}"
echo "  ccc-mcp --help                       # MCP CLI Hilfe"
echo "  python $MCP_SERVERS_DIR/example_server.py  # Beispiel Server starten"
echo ""
echo -e "${YELLOW}Konfiguration:${NC}"
echo "  Virtual Env: $MCP_DIR"
echo "  Config: $MCP_CONFIG/mcp_config.json"
echo "  Servers: $MCP_SERVERS_DIR"
echo ""
echo -e "${GREEN}MCP Server Entwicklung:${NC}"
echo "  1. Server in $MCP_SERVERS_DIR erstellen"
echo "  2. In mcp_config.json registrieren"
echo "  3. Mit Claude Desktop oder anderen Clients verbinden"
echo ""

log_success "MCP installation abgeschlossen (CCC CODE Style)"
