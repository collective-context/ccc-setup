#!/bin/bash
set -euo pipefail
##########################################################
# Site Management - CCC CODE Pattern
# Inspiriert von WordOps (https://wordops.net)
##########################################################

source /etc/ccc.conf
source /root/ccc/setup/functions.sh

echo -e "${BLUE}[MODULE]${NC} Site Management Installation..."

# Site Management Konfiguration
SITES_AVAILABLE="/etc/nginx/sites-available"
SITES_ENABLED="/etc/nginx/sites-enabled"
NGINX_CUSTOM="/etc/nginx/custom"

# Verzeichnisse erstellen
mkdir -p "$SITES_AVAILABLE" "$SITES_ENABLED" "$NGINX_CUSTOM"

# Site Management Funktionen
site_create() {
    # Parameter validieren
    if [ "$#" -lt 1 ]; then
        log_error "Verwendung: site_create <domain> [--php <version>] [--ssl]"
        return 1
    }

    # Variablen initialisieren
    local domain=""
    local php_version="8.3"
    local use_ssl=0
    
    # Parameter parsen
    while [[ $# -gt 0 ]]; do
        case $1 in
            --php)
                php_version="$2"
                shift 2
                ;;
            --ssl)
                use_ssl=1
                shift
                ;;
            *)
                if [ -z "$domain" ]; then
                    domain="$1"
                fi
                shift
                ;;
        esac
    done

    local domain="$1"
    shift
    local options="$*"

    # Domain validieren
    if [[ ! "$domain" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*\.[a-zA-Z]{2,}$ ]]; then
        log_error "Ungültige Domain: $domain"
        return 1
    fi

    # Prüfen ob Domain bereits existiert
    if [ -f "$SITES_AVAILABLE/$domain" ]; then
        log_error "Site $domain existiert bereits"
        return 1
    fi

    # Basis Nginx Konfiguration mit Storage Root
    cat > "$SITES_AVAILABLE/$domain" << NGINX_CONF
# Generated by CCC Site Manager
server {
    listen 80;
    listen [::]:80;
    server_name $domain www.$domain;
    
    root $STORAGE_ROOT/www/$domain;
    index index.php index.html;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'" always;

    # Logging
    access_log $STORAGE_ROOT/logs/nginx/$domain.access.log;
    error_log $STORAGE_ROOT/logs/nginx/$domain.error.log;

    # Custom Includes
    include $STORAGE_ROOT/nginx/conf.d/*.conf;
    
    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    # PHP-FPM
    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
    }
}
NGINX_CONF

    # Symlink erstellen
    ln -sf "$SITES_AVAILABLE/$domain" "$SITES_ENABLED/$domain"

    # Web Root erstellen
    mkdir -p "/var/www/$domain"
    chown -R www-data:www-data "/var/www/$domain"

    # Nginx neu laden
    systemctl reload nginx

    log_success "Site $domain wurde erstellt"
}

site_delete() {
    local domain=$1

    # Symlink entfernen
    rm -f "$SITES_ENABLED/$domain"
    
    # Konfiguration entfernen
    rm -f "$SITES_AVAILABLE/$domain"
    
    # Web Root entfernen
    rm -rf "/var/www/$domain"

    # Nginx neu laden
    systemctl reload nginx

    log_success "Site $domain wurde gelöscht"
}

site_enable() {
    local domain=$1
    ln -sf "$SITES_AVAILABLE/$domain" "$SITES_ENABLED/$domain"
    systemctl reload nginx
    log_success "Site $domain wurde aktiviert"
}

site_disable() {
    local domain=$1
    rm -f "$SITES_ENABLED/$domain"
    systemctl reload nginx
    log_success "Site $domain wurde deaktiviert"
}

# CLI Wrapper erstellen
cat > /usr/local/bin/ccc-site << 'SITESCRIPT'
#!/bin/bash
source /etc/ccc.conf

case $1 in
    create)
        site_create "${@:2}"
        ;;
    delete)
        site_delete "${@:2}"
        ;;
    enable)
        site_enable "${@:2}"
        ;;
    disable)
        site_disable "${@:2}"
        ;;
    *)
        echo "Verwendung: ccc-site {create|delete|enable|disable} domain [options]"
        exit 1
        ;;
esac
SITESCRIPT

chmod +x /usr/local/bin/ccc-site

log_success "Site Management installation abgeschlossen"
