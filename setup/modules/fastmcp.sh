#!/bin/bash
##########################################################
# FastMCP Installation - CCC CODE Pattern
# Python Framework für MCP Server Implementation
##########################################################

source /etc/ccc.conf
source /root/ccc/setup/functions.sh

echo -e "${BLUE}[MODULE]${NC} FastMCP Installation (CCC CODE Style)..."

# FastMCP Configuration in Storage Root
FASTMCP_DIR="$STORAGE_ROOT/tools/fastmcp"
FASTMCP_CONFIG="$STORAGE_ROOT/config/fastmcp"
FASTMCP_SERVERS_DIR="$STORAGE_ROOT/tools/fastmcp/servers"

# Verzeichnisse erstellen
mkdir -p "$FASTMCP_DIR" "$FASTMCP_CONFIG" "$FASTMCP_SERVERS_DIR"
chown -R "$STORAGE_USER:$STORAGE_USER" "$FASTMCP_DIR" "$FASTMCP_CONFIG" "$FASTMCP_SERVERS_DIR"

# Python Virtual Environment für FastMCP erstellen
if [ ! -f "$FASTMCP_DIR/bin/activate" ]; then
    log_info "Erstelle Python Virtual Environment für FastMCP..."
    sudo -u "$STORAGE_USER" python3 -m venv "$FASTMCP_DIR"
else
    log_info "FastMCP Virtual Environment existiert bereits"
fi

# FastMCP Packages installieren/updaten
log_info "Installiere FastMCP Packages..."
sudo -u "$STORAGE_USER" bash -c "
    source '$FASTMCP_DIR/bin/activate'
    pip install --upgrade pip
    
    # FastMCP Core
    pip install --upgrade fastmcp
    pip install --upgrade pydantic
    pip install --upgrade httpx
    pip install --upgrade uvicorn
    
    # Zusätzliche dependencies
    pip install --upgrade numpy
    pip install --upgrade pandas
    pip install --upgrade requests
"

# FastMCP Server Template erstellen
cat > "$FASTMCP_SERVERS_DIR/fast_example.py" << 'FASTMCPEXAMPLE'
#!/usr/bin/env python3
"""
FastMCP Example Server - Generated by CCC
High-performance MCP server using FastMCP framework
"""

from fastmcp import FastMCP
import asyncio

# Create FastMCP server instance
mcp = FastMCP("FastMCP Example")

@mcp.tool()
async def add_numbers(a: int, b: int) -> int:
    """Add two numbers together"""
    return a + b

@mcp.tool()
async def echo_text(text: str) -> str:
    """Echo back the input text"""
    return f"Echo: {text}"

@mcp.tool()
async def get_system_info() -> dict:
    """Get system information"""
    import platform
    import os
    return {
        "platform": platform.platform(),
        "python_version": platform.python_version(),
        "storage_root": os.environ.get("STORAGE_ROOT", "Not set")
    }

if __name__ == "__main__":
    # Run the server
    mcp.run(transport="stdio")
FASTMCPEXAMPLE

chmod +x "$FASTMCP_SERVERS_DIR/fast_example.py"

# FastMCP Wrapper Script erstellen
cat > /usr/local/bin/ccc-fastmcp << 'FASTMCPSCRIPT'
#!/bin/bash
##########################################################
# CCC FastMCP Wrapper - CCC CODE Style
##########################################################

source /etc/ccc.conf
FASTMCP_DIR="$STORAGE_ROOT/tools/fastmcp"

# Virtual Environment aktivieren
if [ -f "$FASTMCP_DIR/bin/activate" ]; then
    source "$FASTMCP_DIR/bin/activate"
else
    echo "FastMCP Virtual Environment nicht gefunden in $FASTMCP_DIR"
    echo "Führe aus: ccc  # um FastMCP zu installieren"
    exit 1
fi

# FastMCP ausführen
exec python -m fastmcp "\$@"
FASTMCPSCRIPT
chmod +x /usr/local/bin/ccc-fastmcp

# FastMCP Development Script
cat > "$FASTMCP_SERVERS_DIR/dev_server.sh" << 'DEVSCRIPT'
#!/bin/bash
# FastMCP Development Server Script

source /etc/ccc.conf
cd "$STORAGE_ROOT/tools/fastmcp"

# Virtual Environment aktivieren
source bin/activate

# Server starten
echo "Starting FastMCP development server..."
python -m fastmcp --help

echo ""
echo "Available example servers:"
echo "  python $FASTMCP_SERVERS_DIR/fast_example.py"
echo ""
echo "Create new server:"
echo "  cp $FASTMCP_SERVERS_DIR/fast_example.py $FASTMCP_SERVERS_DIR/my_server.py"
echo "  # Edit my_server.py and add your tools"
DEVSCRIPT

chmod +x "$FASTMCP_SERVERS_DIR/dev_server.sh"

# FastMCP Konfiguration
cat > "$FASTMCP_CONFIG/fastmcp_config.py" << 'FASTMCPCONFIG'
# FastMCP Configuration - Generated by CCC

import os
from pathlib import Path

STORAGE_ROOT = os.environ.get("STORAGE_ROOT", "/home/user-data")
FASTMCP_DIR = Path(f"{STORAGE_ROOT}/tools/fastmcp")
SERVERS_DIR = Path(f"{STORAGE_ROOT}/tools/fastmcp/servers")

# Server configurations
SERVERS = {
    "fast-example": {
        "command": "python",
        "args": [str(SERVERS_DIR / "fast_example.py")],
        "env": {
            "PYTHONPATH": str(FASTMCP_DIR / "lib/python3.*/site-packages"),
            "STORAGE_ROOT": STORAGE_ROOT
        }
    }
}

# Development settings
DEBUG = True
LOG_LEVEL = "INFO"
FASTMCPCONFIG

# Test FastMCP Installation
log_info "Teste FastMCP Installation..."
if sudo -u "$STORAGE_USER" ccc-fastmcp --help > /dev/null 2>&1; then
    log_success "FastMCP Installation erfolgreich"
else
    log_warning "FastMCP Installation könnte Probleme haben"
fi

# Usage Information
echo ""
echo -e "${GREEN}✅ FastMCP Installation abgeschlossen${NC}"
echo ""
echo -e "${BLUE}Verwendung:${NC}"
echo "  ccc-fastmcp --help                  # FastMCP Hilfe"
echo "  python $FASTMCP_SERVERS_DIR/fast_example.py  # Beispiel Server"
echo "  $FASTMCP_SERVERS_DIR/dev_server.sh  # Development Script"
echo ""
echo -e "${YELLOW}Konfiguration:${NC}"
echo "  Virtual Env: $FASTMCP_DIR"
echo "  Config: $FASTMCP_CONFIG/fastmcp_config.py"
echo "  Servers: $FASTMCP_SERVERS_DIR"
echo ""
echo -e "${GREEN}FastMCP Vorteile:${NC}"
echo "  • Höhere Performance als reines MCP"
echo "  • Einfachere Server-Entwicklung"
echo "  • Automatische Tool-Registrierung"
echo "  • Built-in Validation"
echo ""

log_success "FastMCP installation abgeschlossen (CCC CODE Style)"
